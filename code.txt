# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor

# 2. Load Data
df = pd.read_csv("/workspaces/Transport-Demand-Prediction-Using-Regression-Models-/train_revised.csv")
df.head()

# 3. Check for missing values & data types
print(df.info())
print(df.isnull().sum())

# 4. Create Target Variable (Seats Sold per Ride)
target_df = (
    df.groupby(["ride_id", "travel_date", "travel_time", "travel_from",
                "travel_to", "car_type", "max_capacity"])
      .agg(seats_sold=("seat_number", "count"))
      .reset_index()
)
print(target_df.head())

# 5. Feature Engineering
# Convert travel_date
target_df['travel_date'] = pd.to_datetime(target_df['travel_date'], format="%d-%m-%y", errors="coerce")
target_df['day'] = target_df['travel_date'].dt.day
target_df['month'] = target_df['travel_date'].dt.month
target_df['weekday'] = target_df['travel_date'].dt.weekday

# Convert travel_time → hour
target_df['hour'] = pd.to_datetime(target_df['travel_time'], format="%H:%M", errors="coerce").dt.hour

print(target_df.head())

plt.figure(figsize=(10,5))
sns.countplot(x="weekday", data=target_df, order=range(0,7))
plt.title("Number of Rides by Weekday (0=Mon ... 6=Sun)")
plt.show()

plt.figure(figsize=(10,5))
sns.countplot(x="hour", data=target_df, order=sorted(target_df['hour'].unique()))
plt.title("Number of Rides by Hour of Day")
plt.show()

plt.figure(figsize=(12,6))
sns.barplot(x="travel_from", y="seats_sold", data=target_df, estimator=np.mean)
plt.title("Average Seats Sold per Route (travel_from)")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12,6))
sns.histplot(target_df['seats_sold'], bins=20, kde=True)
plt.title("Distribution of Seats Sold per Ride")
plt.show()

#6. Encode categorical columns
cat_cols = ['travel_from', 'travel_to', 'car_type']
le = LabelEncoder()
for col in cat_cols:
    target_df[col] = le.fit_transform(target_df[col])
    print(f"{col} has {target_df[col].nunique()} unique values")

# 7. Prepare Data for Modeling
X = target_df.drop(["seats_sold", "ride_id", "travel_date", "travel_time"], axis=1)
y = target_df["seats_sold"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

# 8. Train Model (Random Forest)
model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))

# 9. Feature Importance
feat_imp = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
print("\nFeature Importance:\n", feat_imp)

# 10. Plot Feature Importance
plt.figure(figsize=(8,5))
sns.barplot(x=feat_imp, y=feat_imp.index)
plt.title("Feature Importance - Transport Demand Prediction")
plt.show()
